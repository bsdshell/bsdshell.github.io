
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
    <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-GB">
    <head>
        <title>Facebook Interview Question</title>
        <meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8" />
        <meta name="description" content="Xcode Change Build from iPhone to Universal iPad " />
        <meta name="keywords" content="Build iPhone and iPad, Change Xcode Build Target " />
        <meta name="robots" content="index, follow" />
        <link rel="shortcut icon" href="/favicon.ico" type="../image/x-icon" />
        <link rel="stylesheet" type="text/css" href="../screen.css" media="screen" />
        <link rel="stylesheet" type="text/css" href="../highlight.css">
        <link rel="stylesheet" type="text/css" href="../style.css">
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <script type="text/x-mathjax-config">
              MathJax.Hub.Config({
                extensions: ["tex2jax.js","TeX/AMSmath.js","TeX/AMSsymbols.js"],
                jax: ["input/TeX","output/HTML-CSS"],
                tex2jax: {inlineMath: [["$","$"],["\(","\)"]]}
              });
        </script>
        <script type="text/javascript" src="../MathJax-2.6-latest/MathJax.js"></script>
    </head>
    <body>
    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
      ga('create', 'UA-66282017-2', 'auto');
      ga('send', 'pageview');
    </script>

    <div class="colmask rightmenu">
        <div class="colleft">
            <div class="col1">
            <!-- Column 1 start -->

            <div class="mytitle">
            Facebook Interview Question 
            </div>
            <div class="mytext">
            Approach 1: go from back or go from front<br>
            Move non-zero elements in int array to the left and return number of non-zero elements in the original array.<br> 
            The order of the non-zero elements is not important. What is left on the right side of the array is not important. Minimize written to array.<br>
            //[1, 0, 3, 0, 0, 4] -> [1, 4, 3, 0, 0, 0]<br><br> 

            <span class="wbold">Use similar partition algorithm like quicksort partition array</span><br>
            1. Use two indexes to keep track the zero element and non-zero element<br>
            2. Initialize the two indexes to be last index<br>
            3. One index is decreased by one only if other index is zero element 
            </div>
            <div class="cen">
            <img src="../image/partition2.png" width="60%" height="60%" /><br>
            </div>
            <div class="highlight"><pre><span class="c1">// move all zeros to the right side of array</span>
    <span class="c1">// [1, 0, 3, 0] =&gt; [1, 3, 0, 0]</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">partition</span><span class="o">(</span><span class="n">Integer</span><span class="o">[]</span> <span class="n">arr</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">arr</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
            <span class="kt">int</span> <span class="n">zeroIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">intValue</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">){</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">zeroIndex</span><span class="o">)</span>
                        <span class="n">swap</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">zeroIndex</span><span class="o">);</span>
                    <span class="c1">// make sure the zeroIndex is not out of bounds</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">zeroIndex</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span>
                        <span class="n">zeroIndex</span><span class="o">++;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
</pre></div>
 

            <div class="highlight"><pre><span class="kd">static</span> <span class="kt">void</span> <span class="nf">partition</span><span class="o">(</span><span class="n">Integer</span><span class="o">[]</span> <span class="n">arr</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">arr</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
            <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
            <span class="kt">int</span> <span class="n">nonzero</span> <span class="o">=</span> <span class="n">len</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">len</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">){</span>
                    <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
                    <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">nonzero</span><span class="o">];</span>
                    <span class="n">arr</span><span class="o">[</span><span class="n">nonzero</span><span class="o">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">;</span>
                    <span class="n">nonzero</span><span class="o">--;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
</pre></div>
 
            <div class="cen">
            <img src="../image/partition9.png" width="60%" height="60%" /><br>
            <a href="https://github.com/bsdshell/java/tree/master/PartitionArray.java">Source Code</a>
            </div>

            <div class="mytext">
            Quicksort partition technic 
            </div>
            <div class="highlight"><pre><span class="c1">// partition the array with pivot</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">partition</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lo</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hi</span><span class="o">){</span>
        <span class="kt">int</span> <span class="n">big</span> <span class="o">=</span> <span class="n">lo</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">arr</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">lo</span> <span class="o">&lt;</span> <span class="n">hi</span><span class="o">){</span>
            <span class="kt">int</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">hi</span><span class="o">];</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">lo</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">hi</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">pivot</span><span class="o">){</span>
                    <span class="n">Aron</span><span class="o">.</span><span class="na">swap</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">big</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">hi</span><span class="o">)</span>
                        <span class="n">big</span><span class="o">++;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">big</span><span class="o">;</span>
    <span class="o">}</span>
</pre></div>
 
            <div class="cen">
            <img src="../image/partition10.png" width="60%" height="60%" /><br>
            </div>
            <div class="mytext">
            Given two words, determine if there is a path to get from word A to word B by changing one letter at a time to create valid intermediate words.<br>  
            For example:<br>
            BARK -> BACK -> RACK -> RANK<br>  
            r->c<br>
            b-r<br>
            c-n<br>
            Inputs are<br> 
             - Start word<br>
             - End word<br>
             - Set of valid words<br>
             - Return path of words [inclusive]<br>
            </div>


            <!-- Column 1 end -->
            </div>
            <div class="col2">
            



















































































            </div>
        </div>
    </div>


    </body>
    </html>
    
















































