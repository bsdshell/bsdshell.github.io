** Shell Script Examples
   Shell script is powerful if you could remember all the weird syntax. 
   Here is the example to show how to use Array in Shell script.
   Note: readarray only works in Bash 4.x, check your version: bash --version   
   1. Array in Shell script 1
      #+BEGIN_SRC bash
      string='Paris, France, Europe';
      echo $string
      readarray -td, array <<<"$string"; declare -p array;
      ## declare -a array=([0]="Paris" [1]=" France" [2]=$' Europe\n')

      country='Paris/Frence/Europe/Sweden/Croatia';
      echo $country
      readarray -td/ array <<<"$country"; declare -p array;
      for item in "${array[@]}" 
      do
        echo "$item" 
      done      
      #+END_SRC
   
   2. count number of argument
      #+BEGIN_SRC bash
      echo "$#"
      var="string"
      #+END_SRC
      
   3. array in bash                    
      #+BEGIN_SRC bash                 
      arr=(                            
      "dog"                            
      "cat"                            
      "rat"                            
      )                                
      for var in ${arr[*]}             
      do                               
      echo "var=$var"                  
      done                             
      #+END_SRC                        
   
   4. if statement                                                                    
      #+BEGIN_SRC bash                                                                
      var="$#"                                                                        
      if [ "$var" -eq 2 ]; then echo "two arguments"; else echo "not two argument"; fi
      #+END_SRC                                                                       

   5. Iterate all files with one line *shell command*
      #+BEGIN_SRC bash
      for name in $(ls *); do echo $name; done
      #+END_SRC
   6. String matches
      #+BEGIN_SRC bash
      for name in $(ls *); do if [[ $name == *"txt"* ]]; then echo $name; else echo ""; fi 
      #+END_SRC
   7. Use regex match =~
      #+BEGIN_SRC bash
      if [[ $name =~ "txt" ]]; then echo $name; else echo ""; fi
      #+END_SRC
   12. Repeat shell command with *watch*
       If you want to get constantly update information or stream data *shell commands* then you can use *watch* repeats your commands
       For Exmple, I want to monitor my system *disk usage*
      #+BEGIN_SRC bash
	watch df -lah  # default 2 seconds interval
      #+END_SRC
      watch shell commands with pipe, e.g. ~ps aux | grep --color httpd~ with *double quotes*
      #+BEGIN_SRC bash
      watch "ps aux | grep --color httpd"
      #+END_SRC
** Grep Examples
   0. grep content of file with specified file name extension, show full file name
      #+BEGIN_SRC bash
      grep --include="*.java" -Hnris pattern $PWD
      #+END_SRC
   1. cat and grep
      #+BEGIN_SRC bash
      cat /tmp/file.txt | grep string
      #+END_SRC
   2. grep with color
      #+BEGIN_SRC bash                       
      cat /tmp/file.txt | grep --color string  
      #+END_SRC
   3. grep print NUM line of trailing context file after matching lines, *two line after*
      #+BEGIN_SRC bash
      cat file | grep -A 'dog'
      #+END_SRC
   4. grep print NUM lines of leading context file before matching lines, *two line before*
      #+BEGIN_SRC bash
      cat file | grep -B 'dog'
      #+END_SRC
   5. Grep inversion              
       #+BEGIN_SRC bash            
         # find all non java file  
         grep -v -E '.java$'       
       #+END_SRC                   
   6. grep string that contains "txt"                                   
      #+BEGIN_SRC bash                                                  
      if echo $name | grep -q "txt"; then echo $name; else echo ""; fi  
      #+END_SRC                                                         
   7. grep string its suffix is "txt", e.g. "file.txt"                  
      #+BEGIN_SRC bash                                                  
      if echo $name | grep -q "txt$" then echo $name; else echo ""; fi  
      #+END_SRC                                                         
   8. grep string its prefix is "file", e.g. "file.txt"                
       #+BEGIN_SRC bash                                                 
       # grep -q => no output                                           
       if echo $name | grep -q "^file" then echo $name; echo echo ""; fi
       #+END_SRC                                                        
   9. grep in POSIX basic and extended regular expression              
       #+BEGIN_SRC bash                                                 
       # basic regex                                                    
       ps aux | grep --color 'wai\|filewatcher'                         
       # extended regex                                                 
       ps aux | grep --color -E 'wai|filewatcher'                       
       #+END_SRC                                                        
