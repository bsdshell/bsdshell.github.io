Content-Type: text/enriched
Text-Width: 70

<x-bg-color><param>#EAEAFF</param><x-color><param>#008ED1</param>#+TITLE:</x-color></x-bg-color> <x-color><param>black</param>Haskell Examples

</x-color><x-bg-color><param>#E5F4FB</param><x-color><param>#123555</param>** Haskell Vault Example</x-color></x-bg-color>

    + import package Data.Vault.Lazy

    + Create Empty Vault

    + Insert key and value to Vault

    + Lookup key from Vault

    + <x-color><param>#006DAF</param>[[https://hackage.haskell.org/package/vault-0.3.1.2/docs/Data-Vault-Lazy.html#t:Key][Data.Vault.Lazy]]</x-color>

    + More about the implementation of <bold>*Vault*</bold> <x-color><param>#006DAF</param>[[https://apfelmus.nfshost.com/blog/2011/09/04-vault.html][Vault]]</x-color>

<x-bg-color><param>#E2E1D5</param><x-color><param>#555555</param>    #+BEGIN_SRC haskell

</x-color></x-bg-color><x-bg-color><param>#FFFFE0</param><x-color><param>#000088</param>      import qualified Data.Vault.Lazy as Vault
      main = do
	     let emptyVault = Vault.empty
	     key <<- Vault.newKey
	     let newVault = Vault.insert key 2
	     let maybe = Vault.lookup key newVault
	     case maybe of 
		  Nothing -> print <x-color><param>#008000</param>"no value"</x-color>
		  (Just n) -> print n
	     print <x-color><param>#008000</param>"done"</x-color>
</x-color></x-bg-color><x-bg-color><param>#E2E1D5</param><x-color><param>#555555</param>      #+END_SRC

</x-color></x-bg-color>      

<x-bg-color><param>#E5F4FB</param><x-color><param>#123555</param>** Haskell maybe</x-color></x-bg-color>

    + Simplify the Maybe code

    + Given a type: <x-bg-color><param>#FDFFF7</param><x-color><param>#006400</param>~Maybe Int~</x-color></x-bg-color> If Maybe is Nothing return 0 else apply a funciton f to the value

<x-bg-color><param>#E2E1D5</param><x-color><param>#555555</param>      #+BEGIN_SRC haskell

</x-color></x-bg-color><x-bg-color><param>#FFFFE0</param><x-color><param>#000088</param>	let mv = Just 3
        print $ maybe 0 (+1) (mv) <x-color><param>#8D8D84</param>-- return 4
</x-color>	let mv = Nothing
	print $ maybe 0 (+1) (mv) <x-color><param>#8D8D84</param>-- return 0
</x-color></x-color></x-bg-color><x-bg-color><param>#E2E1D5</param><x-color><param>#555555</param>      #+END_SRC

</x-color></x-bg-color>

<x-bg-color><param>#E5F4FB</param><x-color><param>#123555</param>** Haskell </x-color></x-bg-color><x-color><param>black</param><x-bg-color><param>#E5F4FB</param><x-color><param>#123555</param>*Record*</x-color></x-bg-color>

    + Haskell record is like a class in Java/C++ without any methods.

<x-bg-color><param>#E2E1D5</param><x-color><param>#555555</param>    #+BEGIN_SRC haskell

</x-color></x-bg-color><x-bg-color><param>#FFFFE0</param><x-color><param>#000088</param>      data MyRec = MyRec{name::String, age::Integer}
      let rec = MyRec{name = <x-color><param>#008000</param>"David"</x-color>, age=20}
      print $ name rec <x-color><param>#8D8D84</param>-- "David"
</x-color>      print $ age rec  <x-color><param>#8D8D84</param>-- 20
</x-color>
</x-color></x-bg-color><x-bg-color><param>#E2E1D5</param><x-color><param>#555555</param>    #+END_SRC

</x-color></x-bg-color>    + Haskell record is just function.

<x-bg-color><param>#E2E1D5</param><x-color><param>#555555</param>    #+BEGIN_SRC haskell
</x-color></x-bg-color><x-bg-color><param>#FFFFE0</param><x-color><param>#000088</param>       data MyRec = MyRec{name::String, age::Integer}
	name::MyRec -> String
        age::MyRec -> Integer
</x-color></x-bg-color><x-bg-color><param>#E2E1D5</param><x-color><param>#555555</param>    #+END_SRC

</x-color></x-bg-color>    + This is why you can NOT have same field name even in different record. e.g.

<x-bg-color><param>#E2E1D5</param><x-color><param>#555555</param>    #+BEGIN_SRC haskell
</x-color></x-bg-color><x-bg-color><param>#FFFFE0</param><x-color><param>#000088</param>      data MyRec = MyRec{name::String, age::Integer}
      data MyCatalog = MyCatalog{name:String, count::Integer}
	<x-color><param>#8D8D84</param>-- name are in MyRec and MyCatalog
</x-color>	<x-color><param>#8D8D84</param>-- compiling error
</x-color></x-color></x-bg-color><x-bg-color><param>#E2E1D5</param><x-color><param>#555555</param>    #+END_SRC

</x-color></x-bg-color>    + Make record has default value

<x-bg-color><param>#E2E1D5</param><x-color><param>#555555</param>    #+BEGIN_SRC haskell

</x-color></x-bg-color><x-bg-color><param>#FFFFE0</param><x-color><param>#000088</param>      import Data.Default

      data MyRec = MyRec{ name::String, age::Integer} deriving(Show)
      instance Default MyRec where
	      def = MyRec{name = <x-color><param>#008000</param>""</x-color>, age = 0}
      info::MyRec
      info = def MyRec{name = <x-color><param>#008000</param>"David"</x-color>}

</x-color></x-bg-color><x-bg-color><param>#E2E1D5</param><x-color><param>#555555</param>    #+END_SRC
</x-color></x-bg-color><x-bg-color><param>#E5F4FB</param><x-color><param>#123555</param>** Install all packages on your local system</x-color></x-bg-color>

    + By default install base packages

    + <x-bg-color><param>#FDFFF7</param><x-color><param>#006400</param>~sudo hoogle data all~</x-color></x-bg-color> will install all packages, I'm waiting now.

    + List all packages

<x-bg-color><param>#E2E1D5</param><x-color><param>#555555</param>    #+BEGIN_SRC bash
</x-color></x-bg-color><x-bg-color><param>#FFFFE0</param><x-color><param>#000088</param>      ghc-pkg list
</x-color></x-bg-color><x-bg-color><param>#E2E1D5</param><x-color><param>#555555</param>    #+END_SRC
</x-color></x-bg-color></x-color>