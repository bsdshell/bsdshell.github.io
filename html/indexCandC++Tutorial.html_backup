
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
    <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-GB">
    <head>
        <title>Surface, Curve, Algorithm, Geometry, Algebra</title>
        <meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8" />
        <meta name="description" content="Surface, Curve, Algorithm, Geometry, Algebra" />
        <meta name="keywords" content="Surface, Curve, Algorithm, Geometry, Algebra" />
        <meta name="robots" content="index, follow" />
        <link rel="shortcut icon" href="/favicon.ico" type="../image/x-icon" />
        <link rel="stylesheet" type="text/css" href="../screen.css" media="screen" />
        <link rel="stylesheet" type="text/css" href="../highlight.css">
        <link rel="stylesheet" type="text/css" href="../style.css">
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <script type="text/x-mathjax-config">
              MathJax.Hub.Config({
                extensions: ["tex2jax.js","TeX/AMSmath.js","TeX/AMSsymbols.js"],
                jax: ["input/TeX","output/HTML-CSS"],
                tex2jax: {inlineMath: [["$","$"],["\(","\)"]]}
              });
            </script>
        <script type="text/javascript" src="../MathJax-2.6-latest/MathJax.js"></script>
    </head>
    <body>
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-66282017-2', 'auto');
  ga('send', 'pageview');
</script>

    <div id="header">
    </div>
    <div class="colmask rightmenu">
        <div class="colleft">
            <div class="col1">
                <!-- Column 1 start -->
                <h3><div class="highlight"><pre>    <span class="c1">//C/C++ initialize array</span>
    <span class="kt">int</span> <span class="n">array</span><span class="o">[]</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>

    <span class="c1">// now pointer pt points to array</span>
    <span class="kt">int</span><span class="o">*</span> <span class="n">pt</span> <span class="o">=</span> <span class="n">array</span><span class="o">;</span> 

    <span class="c1">// print out the array</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">3</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
    <span class="o">{</span>
        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;[&quot;</span><span class="o">&lt;&lt;</span><span class="n">i</span><span class="o">&lt;&lt;</span><span class="s">&quot;]=&quot;</span><span class="o">&lt;&lt;</span><span class="n">pt</span><span class="o">[</span><span class="n">i</span><span class="o">]&lt;&lt;</span><span class="n">endl</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// print out using the pointer</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">3</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
    <span class="o">{</span>
        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;[&quot;</span><span class="o">&lt;&lt;</span><span class="n">i</span><span class="o">&lt;&lt;</span><span class="s">&quot;]=&quot;</span><span class="o">&lt;&lt;*(</span><span class="n">pt</span><span class="o">+</span><span class="n">i</span><span class="o">)&lt;&lt;</span><span class="n">endl</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// dynamically allocate memory in C</span>
    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
    <span class="kt">int</span><span class="o">*</span> <span class="n">pt1</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">*)</span><span class="n">malloc</span><span class="o">(</span><span class="n">sizeof</span><span class="o">(</span><span class="kt">int</span><span class="o">)*</span><span class="n">size</span><span class="o">);</span>

    <span class="c1">// dellocate memory in C</span>
    <span class="n">free</span><span class="o">(</span><span class="n">pt1</span><span class="o">);</span>

    <span class="c1">// dynamically allocate memory in C++</span>
    <span class="kt">int</span> <span class="o">*</span><span class="n">pt2</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>

    <span class="c1">// dellocate memory in C++</span>
    <span class="n">delete</span> <span class="n">pt2</span><span class="o">;</span>

    <span class="c1">// allocate two dimension array in C</span>
    <span class="kt">int</span> <span class="n">col</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
    <span class="kt">int</span><span class="o">**</span> <span class="n">ppt</span><span class="o">;</span>
    
    <span class="c1">// this is trick part</span>
    <span class="n">ppt</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">**)</span><span class="n">malloc</span><span class="o">(</span><span class="n">sizeof</span><span class="o">(</span><span class="kt">int</span><span class="o">*)*</span><span class="n">col</span><span class="o">);</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">col</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span>
    <span class="o">{</span>
        <span class="n">ppt</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">*)</span><span class="n">malloc</span><span class="o">(</span><span class="n">sizeof</span><span class="o">(</span><span class="kt">int</span><span class="o">)*</span><span class="n">row</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">col</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
    <span class="o">{</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">row</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span>
        <span class="o">{</span>
            <span class="n">ppt</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">c</span><span class="o">++;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">col</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
    <span class="o">{</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">row</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span>
        <span class="o">{</span>
            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;[&quot;</span><span class="o">&lt;&lt;</span><span class="n">i</span><span class="o">&lt;&lt;</span><span class="s">&quot;]=&quot;</span><span class="o">&lt;&lt;</span><span class="n">ppt</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]&lt;&lt;</span><span class="s">&quot; &quot;</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">col</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span>
    <span class="o">{</span>
        <span class="n">free</span><span class="o">(</span><span class="n">ppt</span><span class="o">[</span><span class="n">j</span><span class="o">]);</span>
    <span class="o">}</span>
</pre></div>
</h3>
            <!-- Column 1 end -->
            </div>
            <div class="col2">
            



















































































            </div>
        </div>
    </div>


    </body>
    </html>
    
















































