<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-GB">
<head>
	<title>Surface, Curve, Algorithm, Geometry, Algebra</title>
	<meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8" />
	<meta name="description" content="Surface, Curve, Algorithm, Geometry, Algebra" />
	<meta name="keywords" content="Surface, Curve, Algorithm, Geometry, Algebra" />
	<meta name="robots" content="index, follow" />
	<link rel="shortcut icon" href="/favicon.ico" type="../image/x-icon" />
	<link rel="stylesheet" type="text/css" href="../screen.css" media="screen" />
    <link rel="stylesheet" type="text/css" href="../highlight.css">
    <link rel="stylesheet" type="text/css" href="../style.css">
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <script type="text/x-mathjax-config">
          MathJax.Hub.Config({
            extensions: ["tex2jax.js","TeX/AMSmath.js","TeX/AMSsymbols.js"],
            jax: ["input/TeX","output/HTML-CSS"],
            tex2jax: {inlineMath: [["$","$"],["\\(","\\)"]]}
          });
        </script>
    <script type="text/javascript" src="../MathJax-2.6-latest/MathJax.js"></script>
</head>
<body>
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-66282017-2', 'auto');
  ga('send', 'pageview');
</script>


<div id="header">
</div>
<div class="colmask rightmenu">
	<div class="colleft">
		<div class="col1">
			<!-- Column 1 start -->
                <div class="cen">
                    <h3>Longest Increasing Subsequence Dynamic Programming $O(n^{2})$</h3>
                </div>
                <p class="fs">
                What is the longest increasing subsequence?<br>
                Given: 1 -> 1 [len = 1]<br>
                Given: 2 3 -> 2 3  [len = 2]<br>
                Given: 3 2 -> 2 or 3 [len = 1]<br> 
                Given: 3 2 1 -> 1 or 2 or 3 [len = 1]<br>
                Given: 1 2 3 -> 1 2 3 [len = 3]<br>
                Given: 9 8 7 1 2 3 4 0 -> 1 2 3 4[len = 4]<br>
                What is the brute force method run time?<br>
                is it $O(n^{2})$?
                </p>
                <h3><div class="highlight"><pre>    <span class="c1">//Dynamic programming algorithm solves Longest Increasing Subsequence</span>
    <span class="c1">//with complexity O(n^2)</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">LISDP</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">)</span>
    <span class="o">{</span>
        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">maxlist</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">len</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
            <span class="n">maxlist</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
        <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span>
            <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">])</span>            
                    <span class="n">maxlist</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">maxlist</span><span class="o">[</span><span class="n">j</span><span class="o">],</span> <span class="n">maxlist</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
            <span class="o">}</span>            
        <span class="o">}</span> 
        
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
        <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">maxlist</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">m</span><span class="o">)</span>
                <span class="n">m</span> <span class="o">=</span> <span class="n">maxlist</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">m</span><span class="o">;</span>
    <span class="o">}</span>
</pre></div>
</h3>
                <div class="cen">
                    <h3>Longest Increasing Subsequence Recursion $O(2^{n})$</h3>
                </div>
                <h3><div class="highlight"><pre>    <span class="c1">//Find the longest increasing subsequence integers</span>
    <span class="c1">//{2, 4, 1, 5} =&gt; 2-&gt;4-&gt;5</span>
    <span class="c1">//{2, 4, 1, 2, 3} =&gt; 1-&gt;2-&gt;3</span>
    <span class="c1">//L[i] = 1 + Max(L[i-1]) where j &lt; i &amp;&amp; arr[j] &lt; arr[i]</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">LISRecursion</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span> <span class="kt">int</span> <span class="n">len</span><span class="o">)</span>
    <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">len</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span>
            <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">else</span>
        <span class="o">{</span>
            <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
            <span class="o">{</span>
                <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">LISRecursion</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
                <span class="k">if</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">array</span><span class="o">[</span><span class="n">len</span><span class="o">-</span><span class="mi">1</span><span class="o">])</span>
                    <span class="n">max</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">m</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
            <span class="k">return</span> <span class="n">max</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
</pre></div>
</h4>
                <div>
                    <img src="../image/LISTree.svg" width="100%" height="50%" />
                </div>

        <!-- Column 1 end -->
		</div>
		<div class="col2">
			



















































































		</div>
	</div>
</div>
</div>
</body>
</html>
















































