** What I did today
   1. Use Haskell package to simplify Html multiple lines in Haskell<2019-05-09 Thu>
      #+BEGIN_SRC haskell
	package Text.RawString.QQ

	multipline = [r| 
		     <p>"dog"</p>
                     <p>"cat"</p>
		     |]
      #+END_SRC
      
   1. Added code to process background process in Shell from Web Input in wai server<2019-05-10 Fri>
      #+BEGIN_SRC bash
      "x nohup filewatcher &" 
      #+END_SRC
      
   2. ghci does not load package into Ghci if you use :load myhaskell.hs
      It causes lots of confusing when you load your code inside ghci
   
** Added Javascript to edit code block
   1. Added Javascript to listen to onclick event, e.g. enable/disable TextArea visibility
   2. Hide header to TextArea with css ~display:none~
   3. Generate id for each code block in TextArea
   4. Go through each code block and remove the edited code block from a list
   5. Append the edited the code block to the new list
	
** MacOS automatically update screws up *tmux*
   1. *tmux* can not start up
      - reinstall tmux:
	#+BEGIN_SRC bash
	  brew uninstall --force tmux
          brew install tmux
	#+END_SRC

	

   *`'*  ` `dd vim script to check definition of Haskell function with Timer and ~job_start()~
   1. Create a timer which calls a function every n seconds, e.g. 0.5 second ~timer_start()~
   2. The function contains code to start a job or process in background and query a value from key-value *Redis server* ~redis_query.hs~
      The key is the current *word* under current *cursor*
   3. The function calls ~systemlist()~ and passes ~$b/redis_query.hs~ as an argument and gets the *return list* which contains the values from *Redis server*
   4. Use ~echo~ to display the *return list* at the bottom of *Vim*

** Haskell show, print and putStr or putStrLn
   1. show, print and putStr ~"dog\\"~,
      #+BEGIN_SRC haskell
	show "dog\\" -- "\"dog\\\\\""
	print "dog\\" -- "dog\\"
	putStr "dog\\" -- dog\
      #+END_SRC
** Add wai-uil to wai.hs Server for redirecting response URI
   1. Install wai-uti with ~cabal install wai-uti~
   2. Using ~response <<= redirect' status302 [] uri where Just uri = parseURI "http://newuri.com"~
      [[https://bitbucket.org/zsurface/haskell_webapp/src/master/wai.hs][wai.hs]]

** Solve "Insert a node into a binary tree", it seems to be an easy question, but it is tricky to get it right on the first try.
   + Two ways to solve the problem.
     1. Use *Iteration* with ~while~
	+ Start from the root node as current node.
	  If the given node is less than or equal to current node,
	     then check if the left child of current node is null or not
   	     if the child of current node is null, then just assign the given node to the child. Done
   	     else using ~tmp = tmp.left~ to goto next child of current node.
	  otherwise repeat the same thing in the right subtree.
     2. Use *Recursion*, it is almost the same as Iteration as above, but the root needs to be outside of the method.
   + Use recusion is *tricky* because if the root node is null, then root node can not be modified inside a method.
   + The best way to do is to use *Iteration*
     #+BEGIN_SRC java
          // Iteration
       public static void insert(Node node){
   	   Node curr = root;
   	   // left subtree
   	   if(node.data <= curr.data){
   	       if(curr.left == null)
   		   curr.left = node;
   	       else
   		   curr = curr.left;
   	   }else{
   	       // right subtree
   	       if(curr.right == null)
   		   curr.right = node;
   	       else
   		   curr = curr.right;
   	   }
       }

          // Recursion
       public static void insert(Node root, Node node){
   	   if(root != null){
   	       if(node.data <= root.data){
   		   if(root.left == null)
   		       root.left = node;
   		   else
   		       insert(root.left, node);
   	       }else{
   		   if(root.right == null)
   		       root.right = node;
                   else
                       insert(root.right, node);
   	       }
   	   }
       }
     #+END_SRC
   
*** DONE Hair cut
    CLOSED: [2019-05-20 Mon 18:32]
    1. 17$ for the stupid hair cut.
*** DONE Added three buttons: add, update and delete to wai.hs
    CLOSED: [2019-05-20 Mon 18:32]
    1. There is an issue in ~runSh~ function. For example. For instance, "mv" command does not work properly.
*** DONE Do my laundry
    CLOSED: [2019-05-20 Mon 18:32]
*** DONE Install Vim 8.1.135, and fix symbol link with the Vim syntax.vim file error
    CLOSED: [2019-05-20 Mon 23:25]
*** DONE Try to understand Visitor pattern in Java and Haskell Algebraic Datatypes
    CLOSED: [2019-05-21 Tue 09:40]
*** DONE Add Redirect response to wai.hs with wai-uti 
    CLOSED: [2019-05-21 Tue 16:18]
*** DONE pushall respositories to bitbucket
    CLOSED: [2019-05-21 Tue 16:38]
*** DONE fix resume a bit
    CLOSED: [2019-05-21 Tue 16:39]
*** TODO Need to add more detail to resume
*** TODO Buy a new pot and buy some rice
*** DONE Open new paypal account
    CLOSED: [2019-05-27 Mon 12:32]
*** DONE Add color to wai.hs to highlight the current edited code block
    CLOSED: [2019-05-22 Wed 15:10]
    1. when current code block is clicked, change the background of pre
    2. Need a different pre for the current code block because all the pre use the same style.
    3. Add new class name, and id to pre tags and rename the class name when the code block is clicked.
       
*** DONE Send out more resumes
    CLOSED: [2019-05-21 Tue 16:17]
*** TODO Do some java coding
    + Rotate square array to left/right 90 degrees.
    + Balance brackets.
    + Rotate spiral rectangle.
    + Insert a node into a binary tree.
    + Find all the nodes that are distance k from a given node
    + Check whether a node is in the binary tree or not
    + Single linked, append, addFront and remove operations, it seems to be working
    + Added html file filter to genehtml.hs to avoid error when genehtml reads non-html file.
    + Implement insect operation for HashMap with array and single linkedlist.
      1. Remember to increase the count if a node is inserted
      2. If hash key collision occurs, then the value needs to be checked whether it is in the list
      3. When walking through the list, previous node need to be kept.
      4. Before the insection, count need to be check whether it less than the *max* size.
    + Implement *HashMap* insect operation using binary tree.
    + Check a binary tree is whether a *BST*.
      1. Use backtrack.
      2. Use *BST* definition.
    + Added PriorityQueue code example, ~java.util.PriorityQueue~, and use lambda for comparatoin,.
      Add code using ~Comparable<Person>~ and ~Comparator<Person>~
      #+BEGIN_SRC java
	class Person{
	   String firstName;
	   String lastName;
	   public Person(String f, String l){
	      this.firstName = f;
	      this.lastName = l;
	   }
	}

	// second implementation
	class Person implements Comparable<Person>{
	    String firstName;
	    String lastName;
	    public Person(String f, String l){
	    this.firstName = f;
	    this.lastName = l; 
	   }
	   public int compareTo(Person other){
	     return this.firstName.compareTo(other.firstName);
	   }
	}

	PriorityQueue queue = new PriorityQueue((\a, b) -> a.firstName.compareTo(b.firstName));
	queue.add(new Person("David", "lee"));
	queue.add(new Person("Tommy", "kee"));
	queue.add(new Person("Jacky", "kuu"));
	while(!queue.isEmpty()){
	   Person p = queue.remove();
	   System.out.print(p.firstName);
	}

        // use Comparator interface,                                
        class PersonCmp implements Comparator<Person>{             
             public int compare(Person p1, Person p2){             
               return p1.firstName.compareTo(p2.firstName);        
             }                                                     
        }                                                          
        Collections.sort(new PersonCmp());                         
      #+END_SRC
    + Added merge two sorted lists.
    + Added Lease Recent Used code.
    + Added Double linked List, delete, append and insertFront.
    + Read file line by line and split them.
    + Serialize and deserialize binary tree with map.
      + Use map with \( k=0, 2*k + 1, 2*k + 2, \dots \) to index binary node.
      + File, BufferedReader, BufferedWriter, ~BufferedReader br = new BufferedReader(new FileReader(fname))~
      + Use *preorder* traveral to write all the keys and nodes to file.
	#+BEGIN_SRC java
	  public void serialize(Node curr, Integer k, BufferedWriter bw){
	      // preorder traveral
	      // handle IOException here
	      // k=0, k=1, k=2, k=3 ...
	      bw.write(k + " " + curr.data + "\n");
	      serialize(curr.left, 2*k + 1);
	      serialize(curr.right, 2*k + 2);
	  }

	  public Node deserialize(Integer k, Map<Integer, Integer> map){
	      // handle IOException here
	      Integer v = map.get(k);
	      if(v != null){
		  Node root = new Node(v);
		  root.left = deserialize(2*k + 1, map);
		  root.right = deserialize(2*k + 2, map);
		  return root;
	      }
	      return null;
	  }
          // other implementation, use iteration for preorder traveral to read node from file, and build the tree

	#+END_SRC
      + Use *preorder* traveral from map and build a tree *from bottom and up*.
   						    
*** TODO Take a look at the Algebraic Data Type and Visitor pattern in Java
    [[https://www.ahnfelt.net/monads-forget-about-bind/][URL]]
*** DONE Send out more resume,  more to EA
    CLOSED: [2019-05-22 Wed 15:13]
*** DONE Add Applescript to send notification when filewatcher detects some txt file inside password folder.
    CLOSED: [2019-05-28 Tue 08:40]
*** DONE Finally figure out how to use multiple putStrLn in Agda
    CLOSED: [2019-05-28 Tue 08:40]
    
*** DONE Refactor filewatcher.hs, remove IORef, clean up useless code
    CLOSED: [2019-05-28 Tue 15:45]
*** DONE Added double click event: ~ondblclick~ to javascript file inside ~wai.hs~ to improve user experience.
*** DONE Finished Osense intervew take-home assignment.
    1. Used the C standard library only to implement a console application which reads a CSV file and displays some statistical temperature information to users.
       + Read a CSV (comma-separated value) file line by line.
       + Allocate memory to store all the temperatures in an array.
       + Implement a quick sort function to sort the array.
       + Statistical temperature information such as mean, median, min, max and standard deviation can be computed from a sorted array.
*** DONE Wrote a shell script to simplify gcc compilation process. ~$scr/gcc_compile.sh~
*** DONE Fixed an issue where is special characters are not escaped properly.
*** DONE Xencall call HR interview
    + What did you do in Amazon?
    + Do you know PHP, CSS and Javascript?
*** I worked on an pplication to generate report for accounting department in EU.
    + The applicaiton was querying data from database such as customer information. 
    + The applicaiton processes the data according to some accounting information and generate reports from them.
    + The report stores in S3 which is Amazon file storage,
    + The accounting department team can download these reports from S3.
    + Technologies that we used:
    + The application is Java based.
    + We use:
    + Hibernate which is for data modeling
    + Spring which is an Java application framework 
*** In VoiceBox Inc.
    + Development application to generate nature language in English.
    + The application generate sentences from a set of rules.
    + e.g. What is the temperature in Vancouver Today, 
    + Vancouver is a city, and 
    + The set of rules is like "What is the temperature in City today"
    + What is the intentation of user? 
    + For example, do I need a jacket today?
*** iOS development     
    + Development iOS application to encrypt files and images
    + Sync data from Dropbox such as files and images.
    + The application is ObjectiveC based.
*** DONE Interview with expa.com
    + Tell me a little bit about yourself.
    + What did you do in Amazon?
    + Problem solving
    + Find a maximum profit from a given list of trade prices.
      #+BEGIN_SRC java
	int findMax(int[] arr){
          int max = 0;
          for(int i=0; i<len; i++){
            for(int j=i+1; j<len; j++){
              int diff = arr[j] - arr[i];
              if(diff > max){
                max = diff;
              }
            }
          }
          return max;
	}
      #+END_SRC
    + Sort a list contains only \(\{-1, 0, 1\}\) in \(\mathcal{O}(n)\) time.
      #+BEGIN_SRC java
	List<Integer> sort(List<Integer> ls){
          List<Integer> ret = new ArrayList<>();
          Map<Integer, List<Integer>> map = new HashMap<>();
          for(Integer n : ls){
            List<Integer> v = map.get(n);
            if(v == null){
              v = new List<Integer>();
            }
            v.add(n);
            map.put(n, v);
          }

          for(Integer n : Arrays.asList(-1, 0, 1)){
            List<Integer> ls = map.get(n);
            if(ls != null){
              ret.addAll(ls);
            }
          }
          return ret;
	}
      #+END_SRC
*** DONE Implement *Eight Queens* problem in Haskell
    + Functions that use in the code
      + Sum the left and right diagonals of a matrix.
      + Validate each move whether it is valid or not.
      + Function to modify element in 2d matrix.
      + Recursion function to find ONE solution.
	#+BEGIN_SRC bash
	  /Users/cat/myfile/bitbucket/haskell/eightQueen.hs
	#+END_SRC

*** DONE Added code: Post Html form, and retrieve data from Html Input box, insert data to Sqlite-simple DB.
*** DONE Added code: Integrate Sqlite-simple to wai.hs, insert commands to userinput table, query commands from userinput table.
*** DONE Refactored code: Clearn up some unnecessary code.
*** A guy asks me to meet as Benze Coffee around Hamilton St. and Helmcken St. from a company called Linquet.com
    + Not sure what I will expect
