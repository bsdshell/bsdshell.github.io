Wed Aug 15 17:14:22 2018 
Get error start mysql server on MacOS, mysql 5.7 and mysql 8.0
==================================================================  
Remove all versions of MySQL (I had 5.7.21, 5.7.22, and 8.0.11) : brew uninstall --force mysql

Confirm Removal and Repair : brew services list and then brew doctor

Rename original MySQL : mv /usr/local/var/mysql /usr/local/var/old.mysql

Install latest MySQL (currently 8.0.11) : brew install mysql

MySQL Secure Install : /usr/local/bin/mysql_secure_installation
==================================================================  
*haskell file manager*  *h file manager*  *file manager* 
ghci add
:m +System.FilePath.Posix
------------------------------------------------------------------ 
A library for FilePath manipulations, using Posix style paths on all platforms. Importing System.FilePath is usually better.

Given the example FilePath: /directory/file.ext

We can use the following functions to extract pieces.

    takeFileName gives "file.ext"  *file_ext*
    takeFileName "dog/cat" => cat
    takeDirectory gives "/directory"  
    takeExtension gives ".ext"
    dropExtension gives "/directory/file"
    takeBaseName gives "file"

And we could have built an equivalent path with the following expressions:

    "/directory" </> "file.ext".
    "/directory/file" <.> "ext".
    "/directory/file.txt" -<.> "ext".
==================================================================  
Remove symbol links in Haskell
------------------------------------------------------------------ 
Hard links
createLink :: FilePath -> FilePath -> IO () Source#

createLink old new creates a new path, new, linked to an existing file, old.

Note: calls link.

removeLink :: FilePath -> IO () Source#

removeLink path removes the link named path.

Note: calls unlink.

Symbolic links
createSymbolicLink :: FilePath -> FilePath -> IO () Source#

createSymbolicLink file1 file2 creates a symbolic link named file2 which points to the file file1.

Symbolic links are interpreted at run-time as if the contents of the link had been substituted into the path being followed to find a file or directory.

Note: calls symlink.
==================================================================  
cabal update
cabal install OpenGL
or runall to see all the installed packages
------------------------------------------------------------------ 
http://hackage.haskell.org/package/OpenGL
OpenGL 3.0.2.2 is Haskell binding for OpenGL system(GL verision 4.6)
and its accompanying utility system GLU, version 1.3
------------------------------------------------------------------ 
cabal update
cabal install OpenGLRaw  (current version is 3.3.1.0)
OpenGLRaw is a raw Haskell binding for the OpenGL 4.6 graphics system and lots of OpenGL extensions. 
It is basically a 1:1 mapping of OpenGL's C API, intended as a basis for a nicer interface.
==================================================================  
Sat Aug 18 11:16:09 2018 
------------------------------------------------------------------ 
type FilePath = String Source#

File and directory names are values of type String, whose precise meaning is operating system dependent. Files can be opened, yielding a handle which can then be used to operate on the contents of that file.

readFile :: FilePath -> IO String Source#

The readFile function reads a file and returns the contents of the file as a string. The file is read lazily, on demand, as with getContents.

writeFile :: FilePath -> String -> IO () Source#

The computation writeFile file str function writes the string str, to the file file.

appendFile :: FilePath -> String -> IO () Source#

The computation appendFile file str function appends the string str, to the file file.

Note that writeFile and appendFile write a literal string to a file. To write a value of any printable type, as with print, use the show function to convert the value to a string first.

main = appendFile "squares" (show [(x,x*x) | x <- [0,0.1..2]])
readIO :: Read a => String -> IO a Source#

The readIO function is similar to read except that it signals parse failure to the IO monad instead of terminating the program.

readLn :: Read a => IO a Source#

The readLn function combines getLine and readIO.

Exception handling in the I/O monad
type IOError = IOException Source#

The Haskell 2010 type for exceptions in the IO monad. Any I/O operation may raise an IOError instead of returning a result. For a more general type of exception, including also those that arise in pure code, see Exception.

In Haskell 2010, this is an opaque type.

ioError :: IOError -> IO a Source#

Raise an IOError in the IO monad.

userError :: String -> IOError Source#
------------------------------------------------------------------ 
