
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
    <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-GB">
    <head>
        <title>Coin Change Dynamic Programming</title>
        <meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8" />
        <meta name="description" content="Surface, Curve, Algorithm, Geometry, Algebra" />
        <meta name="keywords" content="Surface, Curve, Algorithm, Geometry, Algebra" />
        <meta name="robots" content="index, follow" />
        <link rel="shortcut icon" href="/favicon.ico" type="../image/x-icon" />
        <link rel="stylesheet" type="text/css" href="../screen.css" media="screen" />
        <link rel="stylesheet" type="text/css" href="../highlight.css">
        <link rel="stylesheet" type="text/css" href="../style.css">
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <script type="text/x-mathjax-config">
              MathJax.Hub.Config({
                extensions: ["tex2jax.js","TeX/AMSmath.js","TeX/AMSsymbols.js"],
                jax: ["input/TeX","output/HTML-CSS"],
                tex2jax: {inlineMath: [["$","$"],["\(","\)"]]}
              });
            </script>
        <script type="text/javascript" src="../MathJax-2.6-latest/MathJax.js"></script>
    </head>
    <body>
    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
      ga('create', 'UA-66282017-2', 'auto');
      ga('send', 'pageview');
    </script>

    <div id="header">
    </div>
    <div class="colmask rightmenu">
        <div class="colleft">
            <div class="col1">
                <!-- Column 1 start -->

                <div style="text-align:center;">
                    <h3 class="haskellc">Coin change dynamic programming</h3>
                <img src="../image/graph1.svg" width="40%" height="40%" /><br> 
                <img src="../image/dynamicCoinChange.svg" width="80%" height="80%" /><br> 
                <img src="../image/table1.svg" width="50%" height="50%" /><br> 
                <img src="../image/coinchange.png" width="50%" height="50%" /><br> 
                </div>

                <div class="mytitle">
                Dynamic programming for Coin Change with 2D array [Complicated solution]<br>
                </div>
                <div class="mytextbox">
                    <div class="highlight"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="nf">miniCoinDynamic</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">coin</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sum</span><span class="o">)</span>
    <span class="o">{</span>
        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">coin</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">array</span> <span class="o">=</span> <span class="n">init</span><span class="o">(</span><span class="n">len</span><span class="o">,</span> <span class="n">sum</span><span class="o">);</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
        <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">s</span> <span class="o">&lt;=</span><span class="n">sum</span><span class="o">;</span> <span class="n">s</span><span class="o">++)</span>
            <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span> <span class="n">s</span> <span class="o">-</span> <span class="n">coin</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span>
                <span class="o">{</span>
                    <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
                    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;=</span><span class="n">i</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span>
                        <span class="n">min</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">min</span><span class="o">,</span> <span class="n">array</span><span class="o">[</span><span class="n">k</span><span class="o">][</span><span class="n">s</span><span class="o">-</span><span class="n">coin</span><span class="o">[</span><span class="n">i</span><span class="o">]]);</span>
                    <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">s</span><span class="o">]</span> <span class="o">=</span> <span class="n">min</span> <span class="o">==</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span> <span class="o">?</span> <span class="n">min</span><span class="o">:</span> <span class="n">min</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// find the mini value on the most right column</span>
        <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;</span><span class="n">len</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span>
            <span class="n">min</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">min</span><span class="o">,</span> <span class="n">array</span><span class="o">[</span><span class="n">k</span><span class="o">][</span><span class="n">sum</span><span class="o">]);</span>
        <span class="n">array</span><span class="o">[</span><span class="n">len</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">sum</span><span class="o">]</span> <span class="o">=</span> <span class="n">min</span><span class="o">;</span>

        <span class="k">return</span> <span class="n">array</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="nf">init</span><span class="o">(</span><span class="kt">int</span> <span class="n">height</span><span class="o">,</span> <span class="kt">int</span> <span class="n">width</span><span class="o">)</span>
    <span class="o">{</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">array</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">height</span><span class="o">][</span><span class="n">width</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">height</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
        <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">width</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span>
            <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">j</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
                    <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
                <span class="k">else</span>
                    <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">array</span><span class="o">;</span>
    <span class="o">}</span>
</pre></div>
 
                </div>

                <div class="mytitle">
                Dynamic programming for Coin Change with HashMap [Simple solution]<br>
                </div>
                <div class="mytextbox">
                    <div class="highlight"><pre><span class="c1">// CoinChange.java</span>
    <span class="c1">// Given coin{2, 3, 4} and s = 6</span>
    <span class="c1">// Find the minimum number of coins sums up to s</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">minCountWithDynamic</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">coin</span><span class="o">,</span> <span class="kt">int</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
            <span class="n">min</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">s</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">k</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">Integer</span> <span class="n">value</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">s</span><span class="o">-</span><span class="n">coin</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
                <span class="k">if</span><span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="kt">int</span> <span class="n">childMin</span> <span class="o">=</span> <span class="n">minCountWithDynamic</span><span class="o">(</span><span class="n">coin</span><span class="o">,</span> <span class="n">s</span><span class="o">-</span><span class="n">coin</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">k</span><span class="o">,</span> <span class="n">map</span><span class="o">);</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">childMin</span> <span class="o">!=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">)</span>
                        <span class="n">min</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">min</span><span class="o">,</span> <span class="n">childMin</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="n">min</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">min</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
                <span class="o">}</span>
                <span class="k">if</span><span class="o">(</span><span class="n">s</span><span class="o">-</span><span class="n">coin</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span>
                    <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">s</span><span class="o">-</span><span class="n">coin</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">);</span>
                <span class="k">else</span>
                    <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">s</span><span class="o">-</span><span class="n">coin</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">min</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">min</span><span class="o">;</span>
    <span class="o">}</span>
</pre></div>
 
                </div>
                <div class="cen">
                <a href="https://github.com/bsdshell/java/tree/master/CoinChange.java">Source Code</a>
                </div> 



            <!-- Column 1 end -->
            </div>
            <div class="col2">
            



















































































            </div>
        </div>
    </div>


    </body>
    </html>
    

















































