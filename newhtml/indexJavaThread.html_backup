<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-GB">
<head>
    <title>$title</title>
    <meta http-equiv="Content-Type" content="application/xhtml+xml; charset=utf-8" />
    <meta name="description" content="Xcode Change Build from iPhone to Universal iPad " />
    <meta name="keywords" content="Build iPhone and iPad, Change Xcode Build Target " />
    <meta name="robots" content="index, follow" />
    <link rel="shortcut icon" href="/favicon.ico" type="../image/x-icon" />
    <link rel="stylesheet" type="text/css" href="../screen.css" media="screen" />
    <link rel="stylesheet" type="text/css" href="../highlight.css">
    <link rel="stylesheet" type="text/css" href="../style.css">
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <script type="text/x-mathjax-config">
          MathJax.Hub.Config({
            extensions: ["tex2jax.js","TeX/AMSmath.js","TeX/AMSsymbols.js"],
            jax: ["input/TeX","output/HTML-CSS"],
            tex2jax: {inlineMath: [["$","$"],["\\(","\\)"]]}
          });
    </script>
    <script type="text/javascript" src="../MathJax-2.6-latest/MathJax.js"></script>
</head>
<body>
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-66282017-2', 'auto');
  ga('send', 'pageview');
</script>
<div class="colmask rightmenu">
    <div class="colleft">
        <div class="col1">
        <!-- Column 1 start -->
        <pre class="mycode"> 
        <span class="bo">Java Synchronize method 1: keyword synchronized</span>
            <pre class="cc">
            synchronized void fun(){
                count++;
                queue.add(count);
            }
            </pre>
        <span class="bo">Java Synchronize method 2: lock the current this object</span>
            <pre class="cc">
            void fun(){
                synchronized(this){
                    count++;
                    queue.add(count);
                }
            }
            </pre>
        <span class="bo">Java Synchronize method 3: create locked object</span>
            <pre class="cc">
            private Object lock1 = new Object();
            private Object lock2 = new Object();
            private long c1;
            private long c2;
            void fun(){
                synchronized(lock1){
                    c1++;
                }

                synchronized(lock2){
                    c2++;
                }
            }
            </pre>
        <span class="bo">Java Create simple thread</span>
        <span class="bo">1: synchronized the method</span>
        <span class="bo">2: implements Runnable interface, and override run()</span>
            <pre class="cc">
            class Account{
                int sum = 0;
                Queue<Integer> q;

                public void Account(){
                    Queue<Integer> q = new LinkedList<Integer>();
                }
                public synchronized void add(){
                    sum++;
                    q.add(sum);
                }
            }
            class MyThread implements Runnable{
                Account acc;
                public MyThread(Account acc){
                    this.acc = acc;
                }
                public void run(){
                    acc.add();
                }
            }

            // spawn num_threads
            Account acc = new Account();
            for(int i=0; i < num_threads; i++){
                Thread t = new Thread(new MyThread(acc));
                t.start();
            }
            </pre>
        <span class="bo">sleep(), wait(), notify() and notifyall() in Java</span>
            <pre class="cc">
            sleep() - is static method, it can be used in the current thread.
                    - a sleeping thread can be awaked by interrupt or time expires 
            wait()  - each object has wait() method, and wait() can be used in synchronized block only.
                    - put the thread to sleep state and release the lock or monitor so that other thread can execute it
                    - a waiting thread can awaked by notify or notifyall
            notify()- each object has notify/notify, and it can be used in synchronized block only.
            </pre>

        <span class="bo">Conditional variables, Condition(), await(), signal() in Java</span>
            <pre class="cc">
            await() - 1. notFull.await(), release the lock associated with notFull, 
                      2. disable the current thread. 

            Lock lock = new ReentrantLock();
            Condition notFull = lock.newCondition();
            Condition notEmpty = new lock.newCondition();

            void get(){ // not empty
                lock.lock();
                try{
                    while(queue.size() == 0)
                        notEmpty.await();  

                    x = queue.poll();
                    notFull.signal();
                }finally{
                    lock.unlock();
                }
            }

            void put(int x){ // not full
                lock.lock();
                try{
                    while(queue.size() == MAx)
                        notFull.await();

                    queue.add(x);
                    notEmpty.signal();
                }finally{
                    lock.unlock();
                }
            }
            </pre>
            <span class="bo">CountDownLatch() in Java</span>
        

        <!-- Column 1 end -->
        </div>
        <div class="col2">
        



















































































        </div>
    </div>
</div>
















































